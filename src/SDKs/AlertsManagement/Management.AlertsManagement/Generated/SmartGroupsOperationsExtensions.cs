// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AlertsManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SmartGroupsOperations.
    /// </summary>
    public static partial class SmartGroupsOperationsExtensions
    {
            /// <summary>
            /// Get all smartGroups within the subscription
            /// </summary>
            /// <remarks>
            /// List all the smartGroups within the specified subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetResource'>
            /// filter by target resource
            /// </param>
            /// <param name='targetResourceGroup'>
            /// filter by target resource group name
            /// </param>
            /// <param name='targetResourceType'>
            /// filter by target resource type
            /// </param>
            /// <param name='monitorService'>
            /// filter by monitor service which is the source of the alert object. Possible
            /// values include: 'Platform', 'Application Insights', 'Log Analytics',
            /// 'Infrastructure Insights', 'ActivityLog Administrative', 'ActivityLog
            /// Security', 'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog
            /// Autoscale', 'ServiceHealth', 'SmartDetector', 'Zabbix', 'SCOM', 'Nagios'
            /// </param>
            /// <param name='monitorCondition'>
            /// filter by monitor condition which is the state of the alert at monitor
            /// service. Possible values include: 'Fired', 'Resolved'
            /// </param>
            /// <param name='severity'>
            /// filter by severity. Possible values include: 'Sev0', 'Sev1', 'Sev2',
            /// 'Sev3', 'Sev4'
            /// </param>
            /// <param name='smartGroupState'>
            /// filter by state. Possible values include: 'New', 'Acknowledged', 'Closed'
            /// </param>
            /// <param name='timeRange'>
            /// filter by time range, default value is 1 day. Possible values include:
            /// '1h', '1d', '7d', '30d'
            /// </param>
            /// <param name='pageCount'>
            /// number of items per page, default value is '25'.
            /// </param>
            /// <param name='sortBy'>
            /// sort the query results by input field, default value is
            /// 'lastModifiedDateTime'. Possible values include: 'alertsCount', 'state',
            /// 'severity', 'startDateTime', 'lastModifiedDateTime'
            /// </param>
            /// <param name='sortOrder'>
            /// sort the query results order in either ascending or descending, default
            /// value is 'desc' for time fields and 'asc' for others. Possible values
            /// include: 'asc', 'desc'
            /// </param>
            public static SmartGroupsList GetAll(this ISmartGroupsOperations operations, string targetResource = default(string), string targetResourceGroup = default(string), string targetResourceType = default(string), string monitorService = default(string), string monitorCondition = default(string), string severity = default(string), string smartGroupState = default(string), string timeRange = default(string), int? pageCount = default(int?), string sortBy = default(string), string sortOrder = default(string))
            {
                return operations.GetAllAsync(targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all smartGroups within the subscription
            /// </summary>
            /// <remarks>
            /// List all the smartGroups within the specified subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetResource'>
            /// filter by target resource
            /// </param>
            /// <param name='targetResourceGroup'>
            /// filter by target resource group name
            /// </param>
            /// <param name='targetResourceType'>
            /// filter by target resource type
            /// </param>
            /// <param name='monitorService'>
            /// filter by monitor service which is the source of the alert object. Possible
            /// values include: 'Platform', 'Application Insights', 'Log Analytics',
            /// 'Infrastructure Insights', 'ActivityLog Administrative', 'ActivityLog
            /// Security', 'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog
            /// Autoscale', 'ServiceHealth', 'SmartDetector', 'Zabbix', 'SCOM', 'Nagios'
            /// </param>
            /// <param name='monitorCondition'>
            /// filter by monitor condition which is the state of the alert at monitor
            /// service. Possible values include: 'Fired', 'Resolved'
            /// </param>
            /// <param name='severity'>
            /// filter by severity. Possible values include: 'Sev0', 'Sev1', 'Sev2',
            /// 'Sev3', 'Sev4'
            /// </param>
            /// <param name='smartGroupState'>
            /// filter by state. Possible values include: 'New', 'Acknowledged', 'Closed'
            /// </param>
            /// <param name='timeRange'>
            /// filter by time range, default value is 1 day. Possible values include:
            /// '1h', '1d', '7d', '30d'
            /// </param>
            /// <param name='pageCount'>
            /// number of items per page, default value is '25'.
            /// </param>
            /// <param name='sortBy'>
            /// sort the query results by input field, default value is
            /// 'lastModifiedDateTime'. Possible values include: 'alertsCount', 'state',
            /// 'severity', 'startDateTime', 'lastModifiedDateTime'
            /// </param>
            /// <param name='sortOrder'>
            /// sort the query results order in either ascending or descending, default
            /// value is 'desc' for time fields and 'asc' for others. Possible values
            /// include: 'asc', 'desc'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SmartGroupsList> GetAllAsync(this ISmartGroupsOperations operations, string targetResource = default(string), string targetResourceGroup = default(string), string targetResourceType = default(string), string monitorService = default(string), string monitorCondition = default(string), string severity = default(string), string smartGroupState = default(string), string timeRange = default(string), int? pageCount = default(int?), string sortBy = default(string), string sortOrder = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get information of smart alerts group.
            /// </summary>
            /// <remarks>
            /// Get details of smart group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='smartGroupId'>
            /// Smart Group Id
            /// </param>
            public static SmartGroup GetById(this ISmartGroupsOperations operations, string smartGroupId)
            {
                return operations.GetByIdAsync(smartGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get information of smart alerts group.
            /// </summary>
            /// <remarks>
            /// Get details of smart group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='smartGroupId'>
            /// Smart Group Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SmartGroup> GetByIdAsync(this ISmartGroupsOperations operations, string smartGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(smartGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Change the state from unresolved to resolved and all the alerts within the
            /// smart group will also be resolved.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='smartGroupId'>
            /// Smart Group Id
            /// </param>
            /// <param name='newState'>
            /// filter by state. Possible values include: 'New', 'Acknowledged', 'Closed'
            /// </param>
            public static SmartGroup ChangeState(this ISmartGroupsOperations operations, string smartGroupId, string newState)
            {
                return operations.ChangeStateAsync(smartGroupId, newState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Change the state from unresolved to resolved and all the alerts within the
            /// smart group will also be resolved.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='smartGroupId'>
            /// Smart Group Id
            /// </param>
            /// <param name='newState'>
            /// filter by state. Possible values include: 'New', 'Acknowledged', 'Closed'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SmartGroup> ChangeStateAsync(this ISmartGroupsOperations operations, string smartGroupId, string newState, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeStateWithHttpMessagesAsync(smartGroupId, newState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the history of the changes of smart group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='smartGroupId'>
            /// Smart Group Id
            /// </param>
            public static SmartGroupModification GetHistory(this ISmartGroupsOperations operations, string smartGroupId)
            {
                return operations.GetHistoryAsync(smartGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the history of the changes of smart group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='smartGroupId'>
            /// Smart Group Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SmartGroupModification> GetHistoryAsync(this ISmartGroupsOperations operations, string smartGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoryWithHttpMessagesAsync(smartGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
