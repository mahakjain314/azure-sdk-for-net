// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AlertsManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AlertsOperations.
    /// </summary>
    public static partial class AlertsOperationsExtensions
    {
            /// <summary>
            /// List all the existing alerts, where the results can be selective by passing
            /// multiple filter parameters including time range and sorted on specific
            /// fields.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetResource'>
            /// filter by target resource
            /// </param>
            /// <param name='targetResourceGroup'>
            /// filter by target resource group name
            /// </param>
            /// <param name='targetResourceType'>
            /// filter by target resource type
            /// </param>
            /// <param name='monitorService'>
            /// filter by monitor service which is the source of the alert object. Possible
            /// values include: 'Platform', 'Application Insights', 'Log Analytics',
            /// 'Infrastructure Insights', 'ActivityLog Administrative', 'ActivityLog
            /// Security', 'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog
            /// Autoscale', 'ServiceHealth', 'SmartDetector', 'Zabbix', 'SCOM', 'Nagios'
            /// </param>
            /// <param name='monitorCondition'>
            /// filter by monitor condition which is the state of the alert at monitor
            /// service. Possible values include: 'Fired', 'Resolved'
            /// </param>
            /// <param name='severity'>
            /// filter by severity. Possible values include: 'Sev0', 'Sev1', 'Sev2',
            /// 'Sev3', 'Sev4'
            /// </param>
            /// <param name='alertState'>
            /// filter by state. Possible values include: 'New', 'Acknowledged', 'Closed'
            /// </param>
            /// <param name='smartGroupId'>
            /// filter by smart Group Id
            /// </param>
            /// <param name='includePayload'>
            /// include payload field content, default value is 'false'.
            /// </param>
            /// <param name='pageCount'>
            /// number of items per page, default value is '25'.
            /// </param>
            /// <param name='sortBy'>
            /// sort the query results by input field, default value is
            /// 'lastModifiedDateTime'. Possible values include: 'name', 'severity',
            /// 'alertState', 'monitorCondition', 'targetResource', 'targetResourceName',
            /// 'targetResourceGroup', 'targetResourceType', 'startDateTime',
            /// 'lastModifiedDateTime'
            /// </param>
            /// <param name='sortOrder'>
            /// sort the query results order in either ascending or descending, default
            /// value is 'desc' for time fields and 'asc' for others. Possible values
            /// include: 'asc', 'desc'
            /// </param>
            /// <param name='timeRange'>
            /// filter by time range, default value is 1 day. Possible values include:
            /// '1h', '1d', '7d', '30d'
            /// </param>
            public static IPage<Alert> GetAll(this IAlertsOperations operations, string targetResource = default(string), string targetResourceGroup = default(string), string targetResourceType = default(string), string monitorService = default(string), string monitorCondition = default(string), string severity = default(string), string alertState = default(string), string smartGroupId = default(string), bool? includePayload = default(bool?), int? pageCount = default(int?), string sortBy = default(string), string sortOrder = default(string), string timeRange = default(string))
            {
                return operations.GetAllAsync(targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, alertState, smartGroupId, includePayload, pageCount, sortBy, sortOrder, timeRange).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the existing alerts, where the results can be selective by passing
            /// multiple filter parameters including time range and sorted on specific
            /// fields.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetResource'>
            /// filter by target resource
            /// </param>
            /// <param name='targetResourceGroup'>
            /// filter by target resource group name
            /// </param>
            /// <param name='targetResourceType'>
            /// filter by target resource type
            /// </param>
            /// <param name='monitorService'>
            /// filter by monitor service which is the source of the alert object. Possible
            /// values include: 'Platform', 'Application Insights', 'Log Analytics',
            /// 'Infrastructure Insights', 'ActivityLog Administrative', 'ActivityLog
            /// Security', 'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog
            /// Autoscale', 'ServiceHealth', 'SmartDetector', 'Zabbix', 'SCOM', 'Nagios'
            /// </param>
            /// <param name='monitorCondition'>
            /// filter by monitor condition which is the state of the alert at monitor
            /// service. Possible values include: 'Fired', 'Resolved'
            /// </param>
            /// <param name='severity'>
            /// filter by severity. Possible values include: 'Sev0', 'Sev1', 'Sev2',
            /// 'Sev3', 'Sev4'
            /// </param>
            /// <param name='alertState'>
            /// filter by state. Possible values include: 'New', 'Acknowledged', 'Closed'
            /// </param>
            /// <param name='smartGroupId'>
            /// filter by smart Group Id
            /// </param>
            /// <param name='includePayload'>
            /// include payload field content, default value is 'false'.
            /// </param>
            /// <param name='pageCount'>
            /// number of items per page, default value is '25'.
            /// </param>
            /// <param name='sortBy'>
            /// sort the query results by input field, default value is
            /// 'lastModifiedDateTime'. Possible values include: 'name', 'severity',
            /// 'alertState', 'monitorCondition', 'targetResource', 'targetResourceName',
            /// 'targetResourceGroup', 'targetResourceType', 'startDateTime',
            /// 'lastModifiedDateTime'
            /// </param>
            /// <param name='sortOrder'>
            /// sort the query results order in either ascending or descending, default
            /// value is 'desc' for time fields and 'asc' for others. Possible values
            /// include: 'asc', 'desc'
            /// </param>
            /// <param name='timeRange'>
            /// filter by time range, default value is 1 day. Possible values include:
            /// '1h', '1d', '7d', '30d'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Alert>> GetAllAsync(this IAlertsOperations operations, string targetResource = default(string), string targetResourceGroup = default(string), string targetResourceType = default(string), string monitorService = default(string), string monitorCondition = default(string), string severity = default(string), string alertState = default(string), string smartGroupId = default(string), bool? includePayload = default(bool?), int? pageCount = default(int?), string sortBy = default(string), string sortOrder = default(string), string timeRange = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, alertState, smartGroupId, includePayload, pageCount, sortBy, sortOrder, timeRange, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific alert.
            /// </summary>
            /// <remarks>
            /// Get information related to a specific alert
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertId'>
            /// Unique ID of an alert object.
            /// </param>
            public static Alert GetById(this IAlertsOperations operations, string alertId)
            {
                return operations.GetByIdAsync(alertId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific alert.
            /// </summary>
            /// <remarks>
            /// Get information related to a specific alert
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertId'>
            /// Unique ID of an alert object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Alert> GetByIdAsync(this IAlertsOperations operations, string alertId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(alertId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Change the state of the alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertId'>
            /// Unique ID of an alert object.
            /// </param>
            /// <param name='newState'>
            /// filter by state. Possible values include: 'New', 'Acknowledged', 'Closed'
            /// </param>
            public static Alert ChangeState(this IAlertsOperations operations, string alertId, string newState)
            {
                return operations.ChangeStateAsync(alertId, newState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Change the state of the alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertId'>
            /// Unique ID of an alert object.
            /// </param>
            /// <param name='newState'>
            /// filter by state. Possible values include: 'New', 'Acknowledged', 'Closed'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Alert> ChangeStateAsync(this IAlertsOperations operations, string alertId, string newState, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeStateWithHttpMessagesAsync(alertId, newState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the history of the changes of an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertId'>
            /// Unique ID of an alert object.
            /// </param>
            public static AlertModification GetHistory(this IAlertsOperations operations, string alertId)
            {
                return operations.GetHistoryAsync(alertId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the history of the changes of an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertId'>
            /// Unique ID of an alert object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertModification> GetHistoryAsync(this IAlertsOperations operations, string alertId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoryWithHttpMessagesAsync(alertId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Summary of alerts with the count each severity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetResourceGroup'>
            /// filter by target resource group name
            /// </param>
            /// <param name='timeRange'>
            /// filter by time range, default value is 1 day. Possible values include:
            /// '1h', '1d', '7d', '30d'
            /// </param>
            public static AlertsSummary GetSummary(this IAlertsOperations operations, string targetResourceGroup = default(string), string timeRange = default(string))
            {
                return operations.GetSummaryAsync(targetResourceGroup, timeRange).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Summary of alerts with the count each severity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetResourceGroup'>
            /// filter by target resource group name
            /// </param>
            /// <param name='timeRange'>
            /// filter by time range, default value is 1 day. Possible values include:
            /// '1h', '1d', '7d', '30d'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertsSummary> GetSummaryAsync(this IAlertsOperations operations, string targetResourceGroup = default(string), string timeRange = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSummaryWithHttpMessagesAsync(targetResourceGroup, timeRange, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the existing alerts, where the results can be selective by passing
            /// multiple filter parameters including time range and sorted on specific
            /// fields.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Alert> GetAllNext(this IAlertsOperations operations, string nextPageLink)
            {
                return operations.GetAllNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the existing alerts, where the results can be selective by passing
            /// multiple filter parameters including time range and sorted on specific
            /// fields.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Alert>> GetAllNextAsync(this IAlertsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
