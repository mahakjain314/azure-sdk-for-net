// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AlertsManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// AlertsOperations operations.
    /// </summary>
    public partial interface IAlertsOperations
    {
        /// <summary>
        /// List all the existing alerts, where the results can be selective by
        /// passing multiple filter parameters including time range and sorted
        /// on specific fields.
        /// </summary>
        /// <param name='targetResource'>
        /// filter by target resource
        /// </param>
        /// <param name='targetResourceGroup'>
        /// filter by target resource group name
        /// </param>
        /// <param name='targetResourceType'>
        /// filter by target resource type
        /// </param>
        /// <param name='monitorService'>
        /// filter by monitor service which is the source of the alert object.
        /// Possible values include: 'Platform', 'Application Insights', 'Log
        /// Analytics', 'Infrastructure Insights', 'ActivityLog
        /// Administrative', 'ActivityLog Security', 'ActivityLog
        /// Recommendation', 'ActivityLog Policy', 'ActivityLog Autoscale',
        /// 'ServiceHealth', 'SmartDetector', 'Zabbix', 'SCOM', 'Nagios'
        /// </param>
        /// <param name='monitorCondition'>
        /// filter by monitor condition which is the state of the alert at
        /// monitor service. Possible values include: 'Fired', 'Resolved'
        /// </param>
        /// <param name='severity'>
        /// filter by severity. Possible values include: 'Sev0', 'Sev1',
        /// 'Sev2', 'Sev3', 'Sev4'
        /// </param>
        /// <param name='alertState'>
        /// filter by state. Possible values include: 'New', 'Acknowledged',
        /// 'Closed'
        /// </param>
        /// <param name='smartGroupId'>
        /// filter by smart Group Id
        /// </param>
        /// <param name='includePayload'>
        /// include payload field content, default value is 'false'.
        /// </param>
        /// <param name='pageCount'>
        /// number of items per page, default value is '25'.
        /// </param>
        /// <param name='sortBy'>
        /// sort the query results by input field, default value is
        /// 'lastModifiedDateTime'. Possible values include: 'name',
        /// 'severity', 'alertState', 'monitorCondition', 'targetResource',
        /// 'targetResourceName', 'targetResourceGroup', 'targetResourceType',
        /// 'startDateTime', 'lastModifiedDateTime'
        /// </param>
        /// <param name='sortOrder'>
        /// sort the query results order in either ascending or descending,
        /// default value is 'desc' for time fields and 'asc' for others.
        /// Possible values include: 'asc', 'desc'
        /// </param>
        /// <param name='timeRange'>
        /// filter by time range, default value is 1 day. Possible values
        /// include: '1h', '1d', '7d', '30d'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<Alert>>> GetAllWithHttpMessagesAsync(string targetResource = default(string), string targetResourceGroup = default(string), string targetResourceType = default(string), string monitorService = default(string), string monitorCondition = default(string), string severity = default(string), string alertState = default(string), string smartGroupId = default(string), bool? includePayload = default(bool?), int? pageCount = default(int?), string sortBy = default(string), string sortOrder = default(string), string timeRange = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a specific alert.
        /// </summary>
        /// <remarks>
        /// Get information related to a specific alert
        /// </remarks>
        /// <param name='alertId'>
        /// Unique ID of an alert object.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<Alert>> GetByIdWithHttpMessagesAsync(string alertId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Change the state of the alert.
        /// </summary>
        /// <param name='alertId'>
        /// Unique ID of an alert object.
        /// </param>
        /// <param name='newState'>
        /// filter by state. Possible values include: 'New', 'Acknowledged',
        /// 'Closed'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<Alert>> ChangeStateWithHttpMessagesAsync(string alertId, string newState, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the history of the changes of an alert.
        /// </summary>
        /// <param name='alertId'>
        /// Unique ID of an alert object.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<AlertModification>> GetHistoryWithHttpMessagesAsync(string alertId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Summary of alerts with the count each severity.
        /// </summary>
        /// <param name='targetResourceGroup'>
        /// filter by target resource group name
        /// </param>
        /// <param name='timeRange'>
        /// filter by time range, default value is 1 day. Possible values
        /// include: '1h', '1d', '7d', '30d'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<AlertsSummary>> GetSummaryWithHttpMessagesAsync(string targetResourceGroup = default(string), string timeRange = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all the existing alerts, where the results can be selective by
        /// passing multiple filter parameters including time range and sorted
        /// on specific fields.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<Alert>>> GetAllNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
